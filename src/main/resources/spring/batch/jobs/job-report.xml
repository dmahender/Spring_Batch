<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" 
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
	http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-3.2.xsd">


  <bean id="report" class="com.mkyong.model.Employees" scope="prototype" />

	<batch:job id="reportJob" restartable="true">
		<batch:step id="step1">
			<batch:tasklet  >
				<batch:chunk reader="itemReader" writer="itemWriter" processor="processor"
					commit-interval="10"  >
					<!-- <batch:skippable-exception-classes>
					<batch:include class="java.lang.Exception"/>
					<batch:exclude class="java.io.FileNotFoundException"/>
					</batch:skippable-exception-classes> -->
				</batch:chunk>
				<batch:transaction-attributes isolation="SERIALIZABLE"/>
			</batch:tasklet>	
		</batch:step>
		<batch:listeners>
			<batch:listener ref="SimpleJobListener"/>
			</batch:listeners>
	
	</batch:job>
	<bean id="SimpleJobListener"  class="com.mkyong.listener.JobListener"/>
	
	
<bean id="springSchedulingLauncher"
      class="com.mkyong.RunScheduler">
  <property name="job" ref="reportJob" />
  <property name="jobLauncher" ref="jobLauncher" />
</bean>
<task:scheduler id="scheduler" />
<task:scheduled-tasks scheduler="scheduler">
  <task:scheduled ref="springSchedulingLauncher"
                  method="run"
                  cron="*/5 * * * * *" />
</task:scheduled-tasks>
	
	<bean id="itemReaderr" class="com.mkyong.reader.itemReader"></bean>
	
	<bean id="itemReader"
      class="org.springframework.batch.item.database.HibernateCursorItemReader" > 
       <property name="sessionFactory"  ref="sessionFactory"/>
    <property name="queryString" value="from Employees where employee_id>110"/>
    </bean>
    
<bean id="queryString" class="com.mkyong.map.queryString"></bean>


<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
<property name="dataSource" ref="dataSource" />
 <property name="hibernateProperties">
       <props>
         <prop key="hibernate.dialect">org.hibernate.dialect.OracleDialect</prop>
         <prop key="hibernate.show_sql">true</prop>
       </props>
     </property>
 
     <property name="mappingResources">
	<list>
           <value>Employee.hbm.xml</value>
	</list>
      </property>
</bean>

 <bean id="DBitemReader"
		class="org.springframework.batch.item.database.JdbcCursorItemReader"
		scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="sql"
			value="select * from EMPLOYEES" />
		<property name="rowMapper">
			<bean class="com.mkyong.model.UserRowMapper" />
		</property>
	</bean> 
	
	<bean id="processor" class="com.mkyong.processor.processor"></bean>
	
<!-- 	<bean id="cvsFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">

		Read a csv file
		<property name="resource" value="classpath:cvs/report.csv" />
<property name="linesToSkip" value="1"></property>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">

				split it
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="in_date,impressions,clicks,earning" />
					</bean>
				</property>

				<property name="fieldSetMapper">
				    
				    return back to reader, rather than a mapped object.
				    
				    	<bean class="com.mkyong.model.ProductMapper" />
					map to an object
				 <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
						<property name="prototypeBeanName" value="report" />
				 </bean> 
			   </property>
			</bean>
		</property>
	</bean> -->
	
	<!-- 
	<bean id="Dbwriter" class="com.mkyong.writer.Dbwriter" scope="step" >
	<constructor-arg ref="dataSource"></constructor-arg>
	</bean> -->

	<bean id="itemWriter"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="assertUpdates" value="true"></property>
		<property name="itemPreparedStatementSetter">
		
		<bean class="com.mkyong.model.EmployeeSetter"></bean>
		</property>
		
		<property name="sql" value=
			         
          "insert into DUP_EMPLOYEE (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) 
          values (?,?,?,?,?,?,?,?,?,?,?)"/>
           
	<property name="dataSource" ref="dataSource" />
	</bean>
	


</beans>
